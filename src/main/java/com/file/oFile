 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}

 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}

 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}

 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}

 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}

 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}

 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}

 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}

 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}

 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}

 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}

 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}

 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}

 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}

 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}

 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}

 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}

 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}

 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}

 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}

 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}

 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}
 //The goal is to change the code from a single threaded class to a multi-threaded class.
 // You can use any Java SDK that you feel necessary.
 
import java.io.*;
import java.util.*;

/**
 * This class copies the given file to the given file. Both file names come from
 * the command line as arguments. Then the first file is read into a list of
 * byte arrays. Then it is writen to the second file. Currently this class is
 * single threaded. It could be updated to be multi-threaded with one thread
 * reading the file and another thread write the file.
 */
public class JavaCopy
{
    private static int BLOCK_SIZE = 1024;
    
    /**
     * Main method.
     * 
     * @param args
     *        the arguments from the command line.
     */
    public static void main(final String[] args)
    {
        final JavaCopy jcp = new JavaCopy(args);
        jcp.copy();
    }

    private final String m_srcFilename;

    private final String m_dstFilename;

    private final List<byte[]> m_fileBytes = new LinkedList<byte[]>();
    
    /**
     * Executes the copy of the file.
     */
    public void copy()
    {
        readSrcFile();
        writeDstFile();
    }
    
    /**
     * Constructs a new instance.
     * 
     * @param args
     *        the arguments from the command line.
     */
    private JavaCopy(final String[] args)
    {
        if (args.length != 2)
        {
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        m_srcFilename = args[0];
        m_dstFilename = args[1];
        
        final File srcFile = new File(m_srcFilename);
        if (!srcFile.exists())
        {
            System.out.println("Source file MUST exist");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        if (!srcFile.isFile())
        {
            System.out.println("Source file MUST be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
        
        final File dstFile = new File(m_dstFilename);
        if (dstFile.exists() && !dstFile.isFile())
        {
            System.out.println(
                    "Destination file MUST not exist or be a normal file");
            System.out.println();
            System.out.println("Usage: JavaCopy <src file> <dst file>");
            System.exit(1);
        }
    }
    
    /**
     * Reads the src file into memory.
     */
    private void readSrcFile()
    {
        try
        {
            final FileInputStream in = new FileInputStream(m_srcFilename);
            try
            {
                final byte[] buffer = new byte[BLOCK_SIZE];
                int numRead = in.read(buffer);
                while (numRead != -1)
                {
                    final byte[] result = new byte[numRead];
                    System.arraycopy(buffer, 0, result, 0, numRead);
                    m_fileBytes.add(result);
                    numRead = in.read(buffer);
                }
            }
            finally
            {
                in.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while reading source file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
    
    /**
     * Writes the bytes in memory to the disk.
     */
    private void writeDstFile()
    {
        try
        {
            final FileOutputStream out = new FileOutputStream(m_dstFilename);
            try
            {
                while (true)
                {
                    if (m_fileBytes.isEmpty())
                    {
                        break;
                    }
                    
                    out.write(m_fileBytes.remove(0));
                }
            }
            finally
            {
                out.close();
            }
        }
        catch (final IOException ioe)
        {
            System.out.println("Error while writing destination file: " + 
                    ioe.getMessage());
            System.exit(1);
        }
    }
}


